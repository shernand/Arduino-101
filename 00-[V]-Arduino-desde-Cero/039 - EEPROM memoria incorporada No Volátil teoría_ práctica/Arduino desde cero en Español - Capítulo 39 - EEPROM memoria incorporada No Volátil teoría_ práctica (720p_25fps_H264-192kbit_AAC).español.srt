1
00:00:00,000 --> 00:00:03,928
en esta oportunidad conoceremos un tipo

2
00:00:02,370 --> 00:00:06,240
de memoria incorporada en el

3
00:00:03,928 --> 00:00:08,490
microcontrolador de arduino la cual nos

4
00:00:06,240 --> 00:00:11,070
permitirá almacenar datos durante la

5
00:00:08,490 --> 00:00:13,410
ejecución de un programa y no perderlos

6
00:00:11,070 --> 00:00:16,138
aunque se quite la alimentación esta

7
00:00:13,410 --> 00:00:18,690
memoria aquí representada por una imagen

8
00:00:16,138 --> 00:00:20,698
a nivel microscópico se encuentra dentro

9
00:00:18,690 --> 00:00:22,830
del propio circuito integrado y su

10
00:00:20,699 --> 00:00:25,410
capacidad dependerá del modelo de

11
00:00:22,829 --> 00:00:27,809
microcontrolador en esta tabla vemos dos

12
00:00:25,410 --> 00:00:30,448
modelos y en qué placas arduino las

13
00:00:27,809 --> 00:00:32,789
implementa para el modelo 1 de la imagen

14
00:00:30,449 --> 00:00:36,510
tendremos como microcontrolador a las

15
00:00:32,789 --> 00:00:39,359
mega 328 p el cual también se utiliza en

16
00:00:36,509 --> 00:00:41,789
los modelos nano pro mini y muchos más

17
00:00:39,359 --> 00:00:46,500
la capacidad de esta memoria llamada

18
00:00:41,789 --> 00:00:49,589
vrooom es de 1024 bytes es decir un kb

19
00:00:46,500 --> 00:00:52,259
ebro es una memoria del tipo no volátil

20
00:00:49,590 --> 00:00:54,840
y como decíamos antes esto significa que

21
00:00:52,259 --> 00:00:57,359
mantiene sus datos aún sin alimentación

22
00:00:54,840 --> 00:00:59,940
externa es posible programarla y

23
00:00:57,359 --> 00:01:01,979
borrarla eléctricamente algo que podría

24
00:00:59,939 --> 00:01:05,039
darse por descontado pero las primeras

25
00:01:01,979 --> 00:01:07,349
memorias programables y se las borraba

26
00:01:05,040 --> 00:01:09,780
mediante luz ultravioleta a través de

27
00:01:07,349 --> 00:01:12,179
una pequeña ventana transparente sobre

28
00:01:09,780 --> 00:01:14,219
la superficie del circuito integrado la

29
00:01:12,180 --> 00:01:16,770
evolución vino con la posibilidad de

30
00:01:14,219 --> 00:01:20,219
poder borrarlas eléctricamente de allí

31
00:01:16,769 --> 00:01:22,859
el nombre de ebro donde proviene de

32
00:01:20,219 --> 00:01:25,049
eléctrica alí era isabel volviendo a la

33
00:01:22,859 --> 00:01:27,689
tabla dijimos que por ejemplo para una

34
00:01:25,049 --> 00:01:30,259
ruina 1 con el microcontrolador admira

35
00:01:27,689 --> 00:01:34,140
328 p tendremos a nuestra disposición

36
00:01:30,260 --> 00:01:36,510
una memoria con una capacidad de 1024

37
00:01:34,140 --> 00:01:39,290
bytes para el caso de arduino mega que

38
00:01:36,510 --> 00:01:43,650
utiliza el microcontrolador at mega

39
00:01:39,290 --> 00:01:46,560
2560 la capacidad será de 4 mil 96 bytes

40
00:01:43,650 --> 00:01:48,330
4 kilobytes puede parecer en principio

41
00:01:46,560 --> 00:01:50,549
poco pero hay que entender que esta

42
00:01:48,329 --> 00:01:52,859
memoria se utiliza únicamente cuando

43
00:01:50,549 --> 00:01:55,109
deseamos almacenar algún valor que es

44
00:01:52,859 --> 00:01:57,930
importante recuperar en cualquier

45
00:01:55,109 --> 00:02:00,060
momento posterior e incluso luego de un

46
00:01:57,930 --> 00:02:02,160
reinicio un ejemplo sería que estemos

47
00:02:00,060 --> 00:02:04,650
desarrollando un sistema de alarma

48
00:02:02,159 --> 00:02:07,618
mediante un teclado como el visto en el

49
00:02:04,650 --> 00:02:10,439
capítulo 9 la clave maestra para activar

50
00:02:07,618 --> 00:02:12,250
o desactivar la alarma podríamos dejarla

51
00:02:10,439 --> 00:02:14,889
para que la personalice

52
00:02:12,250 --> 00:02:17,740
y si no usamos la memoria para guardar

53
00:02:14,889 --> 00:02:19,899
dicha clave se perdería con el solo

54
00:02:17,740 --> 00:02:22,510
hecho de un reinicio o falta de

55
00:02:19,900 --> 00:02:24,939
alimentación así existen multitud de

56
00:02:22,509 --> 00:02:27,129
ejemplos de uso aquí vemos una

57
00:02:24,939 --> 00:02:29,859
representación gráfica de la memoria

58
00:02:27,129 --> 00:02:32,469
eprom e incorporada podemos imaginarla

59
00:02:29,860 --> 00:02:34,690
como una serie de casillas o casilleros

60
00:02:32,469 --> 00:02:38,050
uno al lado del otro para nuestro

61
00:02:34,689 --> 00:02:41,139
arduino 1 con 1024 bytes de memoria

62
00:02:38,050 --> 00:02:44,350
tendremos una fila con 1024 de estos

63
00:02:41,139 --> 00:02:47,409
casilleros comenzando desde el índice 0

64
00:02:44,349 --> 00:02:48,810
al 1000 23 en el caso de arduino mega

65
00:02:47,409 --> 00:02:52,000
tendríamos

66
00:02:48,810 --> 00:02:54,520
4.096 de estos casilleros a cada uno de

67
00:02:52,000 --> 00:02:57,250
estos casilleros lo denominaremos una

68
00:02:54,520 --> 00:03:01,150
celda y en cada celda podremos almacenar

69
00:02:57,250 --> 00:03:03,389
un byte de información 8 bits como ya

70
00:03:01,150 --> 00:03:07,439
sabemos 8 bits nos permiten almacenar

71
00:03:03,389 --> 00:03:09,849
números en formato decimal de 0 a

72
00:03:07,439 --> 00:03:14,650
255 lo que equivale en formato

73
00:03:09,849 --> 00:03:18,549
hexadecimal de 00 a efe efe y en binario

74
00:03:14,650 --> 00:03:21,010
de 8 ceros hasta 8 unos la ubicación de

75
00:03:18,549 --> 00:03:23,460
cada celda en la memoria estará definida

76
00:03:21,009 --> 00:03:26,530
por su dirección que comienza de cero

77
00:03:23,460 --> 00:03:28,780
hasta la longitud total menos uno

78
00:03:26,530 --> 00:03:32,740
entonces para resumir tenemos una

79
00:03:28,780 --> 00:03:36,039
memoria no volátil de 1024 celdas y en

80
00:03:32,740 --> 00:03:38,379
cada celda podemos almacenar un byte de

81
00:03:36,039 --> 00:03:40,509
información pero esta memoria tiene un

82
00:03:38,379 --> 00:03:43,120
par de características especiales a

83
00:03:40,509 --> 00:03:45,849
tener en cuenta una de ellas es el ciclo

84
00:03:43,120 --> 00:03:48,819
de vida de cada celda de 100 mil

85
00:03:45,849 --> 00:03:51,069
escrituras eso se traduce en el hecho de

86
00:03:48,819 --> 00:03:53,739
que cada vez que guardamos información

87
00:03:51,069 --> 00:03:56,019
en una celda vamos acortando su vida

88
00:03:53,740 --> 00:03:58,360
útil que si bien es muy alta no es

89
00:03:56,020 --> 00:04:00,340
infinito no hay límites en la cantidad

90
00:03:58,360 --> 00:04:02,560
de veces que podemos leer una

91
00:04:00,340 --> 00:04:04,930
determinada celda pero si para su

92
00:04:02,560 --> 00:04:07,810
escritura el número de 100.000 no

93
00:04:04,930 --> 00:04:10,360
significa que llegará a esa cantidad las

94
00:04:07,810 --> 00:04:11,920
celdas ya no puede usarse es un valor

95
00:04:10,360 --> 00:04:14,050
que establece el fabricante del

96
00:04:11,919 --> 00:04:16,360
microcontrolador como el límite de

97
00:04:14,050 --> 00:04:18,579
fiabilidad luego de más de 100 mil

98
00:04:16,360 --> 00:04:20,350
ciclos de escritura no nos puede

99
00:04:18,579 --> 00:04:22,870
asegurar la integridad de la información

100
00:04:20,350 --> 00:04:25,720
en la práctica veremos que hay formas

101
00:04:22,870 --> 00:04:28,389
simples de no estar escribiendo de forma

102
00:04:25,720 --> 00:04:31,060
a una misma celda también tiene en

103
00:04:28,389 --> 00:04:33,219
cuenta que el ciclo de vida es por celda

104
00:04:31,060 --> 00:04:35,500
así si por ejemplo tú hicimos un

105
00:04:33,220 --> 00:04:38,290
programa que escribe de forma muy

106
00:04:35,500 --> 00:04:40,779
seguida sobre una celda antes de llegar

107
00:04:38,290 --> 00:04:43,810
a los 100 mil ciclos simplemente podemos

108
00:04:40,779 --> 00:04:46,029
cambiar a otra celda y tendremos otros

109
00:04:43,810 --> 00:04:48,250
100 mil ciclos otro de los factores a

110
00:04:46,029 --> 00:04:50,169
tener en cuenta es el tiempo que demora

111
00:04:48,250 --> 00:04:53,589
en procesarse la escritura de

112
00:04:50,170 --> 00:04:56,050
información y es de 33 milisegundos

113
00:04:53,589 --> 00:04:58,419
aunque parezca poco tiempo en realidad

114
00:04:56,050 --> 00:05:00,759
se trata de una memoria lenta en

115
00:04:58,420 --> 00:05:02,710
términos generales en muchos programas

116
00:05:00,759 --> 00:05:05,769
podríamos estar actualizando una

117
00:05:02,709 --> 00:05:08,139
variable mucho más rápido que 33

118
00:05:05,769 --> 00:05:10,539
milisegundos finalmente podrías pensar

119
00:05:08,139 --> 00:05:13,180
que esta memoria de fábrica o por

120
00:05:10,540 --> 00:05:15,370
defecto viene con todas sus celdas en

121
00:05:13,180 --> 00:05:18,129
cero pero en realidad es todo lo

122
00:05:15,370 --> 00:05:22,418
contrario cada celda viene por defecto

123
00:05:18,129 --> 00:05:24,939
con todos unos equivalente a 2 55 en

124
00:05:22,418 --> 00:05:27,759
decimal muy bien vimos varias cuestiones

125
00:05:24,939 --> 00:05:29,410
bastante técnicas sobre esta memoria de

126
00:05:27,759 --> 00:05:31,779
manera que es hora de ver cómo

127
00:05:29,410 --> 00:05:33,880
utilizarla en la práctica y verás qué

128
00:05:31,779 --> 00:05:36,699
muy simple gracias a una librería

129
00:05:33,879 --> 00:05:38,709
específica incorporada en el id de

130
00:05:36,699 --> 00:05:41,168
arduino este es el código que usaremos

131
00:05:38,709 --> 00:05:42,930
para el primer programa como la memoria

132
00:05:41,168 --> 00:05:46,120
está incorporada en el microcontrolador

133
00:05:42,930 --> 00:05:48,730
no tendremos ningún circuito externo de

134
00:05:46,120 --> 00:05:51,129
conexión solo conectaremos arduino a

135
00:05:48,730 --> 00:05:54,160
nuestra computadora mediante el cable

136
00:05:51,129 --> 00:05:57,100
usb en la primer línea incluimos la

137
00:05:54,160 --> 00:05:59,710
librería brom que viene incorporada en

138
00:05:57,100 --> 00:06:02,350
el ide y no es necesario descargar las

139
00:05:59,709 --> 00:06:04,629
usaremos sus funciones asociadas para un

140
00:06:02,350 --> 00:06:06,730
manejo simple de la memoria la idea de

141
00:06:04,629 --> 00:06:09,759
este programa es simplemente verificar

142
00:06:06,730 --> 00:06:12,360
que podemos leer correctamente una celda

143
00:06:09,759 --> 00:06:14,918
escribir un valor en ella y

144
00:06:12,360 --> 00:06:17,350
posteriormente estaremos desconectando

145
00:06:14,918 --> 00:06:19,289
arduino cargando un nuevo programa y

146
00:06:17,350 --> 00:06:21,660
verificar que el valor almacenado

147
00:06:19,290 --> 00:06:24,310
anteriormente sigue estando presente

148
00:06:21,660 --> 00:06:27,220
colocaremos todo el código dentro del

149
00:06:24,310 --> 00:06:30,069
set-up para que se ejecute una sola vez

150
00:06:27,220 --> 00:06:32,050
y solo declaramos el loop pero sin

151
00:06:30,069 --> 00:06:36,019
contenido inicializar hemos la

152
00:06:32,050 --> 00:06:37,879
comunicación serie a 9 600 bps ya que

153
00:06:36,019 --> 00:06:40,879
estaremos escribiendo en el monitor

154
00:06:37,879 --> 00:06:44,029
serie luego con el primer serial print

155
00:06:40,879 --> 00:06:47,000
line escribimos el texto capacidad de

156
00:06:44,029 --> 00:06:49,729
memoria a continuación con otro serial

157
00:06:47,000 --> 00:06:53,240
punto pin de l'ain escribimos el valor

158
00:06:49,730 --> 00:06:55,970
devuelto por la función live from punto

159
00:06:53,240 --> 00:06:58,579
lento nos devolverá en bytes la

160
00:06:55,970 --> 00:07:00,680
capacidad de nuestra memoria hebrón que

161
00:06:58,579 --> 00:07:02,899
como vimos cambia en función del

162
00:07:00,680 --> 00:07:05,319
microcontrolador de nuestra placa ya

163
00:07:02,899 --> 00:07:07,549
sabemos que para arduino uno será de

164
00:07:05,319 --> 00:07:10,040
1024 bytes pero no viene además

165
00:07:07,550 --> 00:07:12,920
verificar si estás utilizando por

166
00:07:10,040 --> 00:07:16,550
ejemplo arduino a mega entonces el valor

167
00:07:12,920 --> 00:07:18,560
devuelto sería de 4.096 y esta función

168
00:07:16,550 --> 00:07:20,629
no requiere parámetros por eso

169
00:07:18,560 --> 00:07:23,420
simplemente le invocamos de forma

170
00:07:20,629 --> 00:07:25,909
directa dentro del serial punto print

171
00:07:23,420 --> 00:07:28,160
line y listo dejaremos un espacio en

172
00:07:25,910 --> 00:07:30,980
blanco para separar esta línea de las

173
00:07:28,160 --> 00:07:32,780
demás con un serial punto print line y

174
00:07:30,980 --> 00:07:35,180
entre comillas un espacio en blanco

175
00:07:32,779 --> 00:07:38,239
luego será momento de hacer la lectura

176
00:07:35,180 --> 00:07:41,900
de una celda de memoria y elegiremos la

177
00:07:38,240 --> 00:07:44,180
primera cuya dirección es pero por eso

178
00:07:41,899 --> 00:07:46,609
primero escribimos el texto valor

179
00:07:44,180 --> 00:07:49,009
almacenado en dirección 0 y en la

180
00:07:46,610 --> 00:07:52,729
siguiente línea utilizamos la función

181
00:07:49,009 --> 00:07:55,069
read requiere de un solo parámetro y es

182
00:07:52,728 --> 00:07:57,379
la dirección de memoria en nuestro caso

183
00:07:55,069 --> 00:08:00,379
como queremos leer la primera celda con

184
00:07:57,379 --> 00:08:03,620
dirección 0 entonces dentro del serial

185
00:08:00,379 --> 00:08:06,620
punto print line colocamos por un punto

186
00:08:03,620 --> 00:08:09,530
read entre paréntesis 0 y de esa manera

187
00:08:06,620 --> 00:08:11,870
obtenemos el valor almacenado en dicha

188
00:08:09,529 --> 00:08:14,179
dirección ya sabemos que la memoria por

189
00:08:11,870 --> 00:08:18,350
defecto viene cargada con todas sus

190
00:08:14,180 --> 00:08:20,959
celdas con todos unos equivalente a 2 55

191
00:08:18,350 --> 00:08:22,970
en decimal con lo cual al momento de

192
00:08:20,959 --> 00:08:25,029
ejecutar el programa veremos que

193
00:08:22,970 --> 00:08:27,919
devolverá el valor

194
00:08:25,029 --> 00:08:29,929
255 de esa manera vimos la primera

195
00:08:27,918 --> 00:08:32,629
función básica para el manejo de la

196
00:08:29,930 --> 00:08:35,930
memoria hebrón y es la función ruido

197
00:08:32,629 --> 00:08:38,330
para leer el contenido de una celda en

198
00:08:35,929 --> 00:08:40,399
la dirección especificada para finalizar

199
00:08:38,330 --> 00:08:43,129
el programa utilizaremos la función

200
00:08:40,399 --> 00:08:45,439
write para almacenar un valor en una

201
00:08:43,129 --> 00:08:46,519
celda esta función requiere de dos

202
00:08:45,440 --> 00:08:49,010
paradas

203
00:08:46,519 --> 00:08:51,710
en la dirección de la celda y el valor a

204
00:08:49,009 --> 00:08:54,559
almacenar nosotros guardaremos el número

205
00:08:51,710 --> 00:08:57,139
39 que es el número del presente

206
00:08:54,559 --> 00:08:59,629
capítulo con un serial punto print line

207
00:08:57,139 --> 00:09:02,990
escribiremos primero en el monitor serie

208
00:08:59,629 --> 00:09:05,809
el texto almacenando número 39 en

209
00:09:02,990 --> 00:09:08,919
dirección 0 y en la siguiente línea con

210
00:09:05,809 --> 00:09:12,979
y from punto write

211
00:09:08,919 --> 00:09:15,529
039 almacenamos el número 39 en la

212
00:09:12,980 --> 00:09:17,480
dirección 0 y eso es todo para el primer

213
00:09:15,529 --> 00:09:19,610
programa por cierto no he colocado

214
00:09:17,480 --> 00:09:22,100
ningún acento por cuestiones de

215
00:09:19,610 --> 00:09:24,409
compatibilidad ya que a veces en el

216
00:09:22,100 --> 00:09:27,500
monitor serie los caracteres especiales

217
00:09:24,409 --> 00:09:30,319
pueden no mostrarse correctamente vamos

218
00:09:27,500 --> 00:09:32,809
a verificar subir el programa y es

219
00:09:30,320 --> 00:09:35,210
importante que vayas abriendo el monitor

220
00:09:32,809 --> 00:09:37,699
serie antes de que finalice de subir el

221
00:09:35,210 --> 00:09:40,250
programa a la placa y ya te explicó el

222
00:09:37,700 --> 00:09:43,900
motivo muy bien vemos en la ventana que

223
00:09:40,250 --> 00:09:46,129
se muestra capacidad de memoria 1024

224
00:09:43,899 --> 00:09:50,600
verificando que efectivamente para

225
00:09:46,129 --> 00:09:53,779
arduino con at mega 328 p tenemos 1024

226
00:09:50,600 --> 00:09:57,519
bits a nuestra disposición de memo pero

227
00:09:53,779 --> 00:10:00,470
luego valor almacenado en dirección 0

228
00:09:57,519 --> 00:10:03,470
255 cuestión que ya sabíamos de antemano

229
00:10:00,470 --> 00:10:06,129
que es el valor almacenado por defecto

230
00:10:03,470 --> 00:10:10,070
en todas las celdas finalmente el texto

231
00:10:06,129 --> 00:10:13,159
almacenando número 39 en dirección 0 de

232
00:10:10,070 --> 00:10:16,040
manera que ahora en vez de estar el 255

233
00:10:13,159 --> 00:10:19,339
por defecto habríamos escrito el número

234
00:10:16,039 --> 00:10:22,490
39 y dicho número por estar almacenado

235
00:10:19,340 --> 00:10:24,920
justamente en la proam sobrevivirá un

236
00:10:22,490 --> 00:10:27,200
reinicio o la pérdida total de energía

237
00:10:24,919 --> 00:10:29,509
antes que me olvide te decía que era

238
00:10:27,200 --> 00:10:31,430
importante ir abriendo el monitor serie

239
00:10:29,509 --> 00:10:34,100
antes de que subas el programa a la

240
00:10:31,429 --> 00:10:36,889
placa y el motivo es que ni bien se sube

241
00:10:34,100 --> 00:10:39,139
el programa arduino lo ejecuta y si no

242
00:10:36,889 --> 00:10:41,240
abrimos el monitor serie para entonces

243
00:10:39,139 --> 00:10:45,259
habrá hecho el proceso de leer la

244
00:10:41,240 --> 00:10:48,590
dirección 0 con un valor de 255 luego

245
00:10:45,259 --> 00:10:51,049
escribir el número 39 todo esto sin que

246
00:10:48,590 --> 00:10:53,210
se muestre nada porque aún no abrimos el

247
00:10:51,049 --> 00:10:55,370
monitor serie si lo abrimos luego de

248
00:10:53,210 --> 00:10:57,800
unos segundos el programa se vuelve a

249
00:10:55,370 --> 00:11:00,379
ejecutar ya que la apertura del monitor

250
00:10:57,799 --> 00:11:03,169
serie genera un reset de forma

251
00:11:00,379 --> 00:11:07,490
automática así que veríamos que luego de

252
00:11:03,169 --> 00:11:09,769
valor almacenado en dirección 0 sería 39

253
00:11:07,490 --> 00:11:12,950
ya que lo escribimos con anterioridad

254
00:11:09,769 --> 00:11:15,709
pero al no estar el monitor abierto en

255
00:11:12,950 --> 00:11:17,930
cierta forma no lo vimos lo importante

256
00:11:15,708 --> 00:11:20,359
es que escribimos un valor personalizado

257
00:11:17,929 --> 00:11:22,969
en la dirección 0 para verificar de

258
00:11:20,360 --> 00:11:25,519
forma inequívoca que el valor permanece

259
00:11:22,970 --> 00:11:28,670
aunque se quite la alimentación hagamos

260
00:11:25,519 --> 00:11:31,759
justamente eso desconectamos arduino del

261
00:11:28,669 --> 00:11:34,309
cable usb muy bien ahora comentemos

262
00:11:31,759 --> 00:11:36,370
todas las líneas de nuestro programa y

263
00:11:34,309 --> 00:11:38,569
dejemos únicamente las dos

264
00:11:36,370 --> 00:11:41,750
correspondientes al proceso de lectura

265
00:11:38,570 --> 00:11:44,629
de la dirección 0 y la inicialización

266
00:11:41,750 --> 00:11:47,450
del monitor serie al hacer esto solo

267
00:11:44,629 --> 00:11:50,269
deseamos ver si en la posición 0 el

268
00:11:47,450 --> 00:11:52,399
número 39 sigue estando allí aunque

269
00:11:50,269 --> 00:11:55,100
desconectamos por completo la placa

270
00:11:52,399 --> 00:11:57,860
recordad que las líneas comentadas son

271
00:11:55,100 --> 00:12:00,200
pasadas por alto por el compilador así

272
00:11:57,860 --> 00:12:02,839
que de forma efectiva tenemos sólo tres

273
00:12:00,200 --> 00:12:06,439
líneas de código que conectemos el cable

274
00:12:02,839 --> 00:12:09,199
usb arduino verifiquemos y subamos el

275
00:12:06,438 --> 00:12:11,958
programa nuevamente abriremos el monitor

276
00:12:09,198 --> 00:12:15,620
serie perfecto vemos que nos indica que

277
00:12:11,958 --> 00:12:18,919
el valor almacenado en dirección 0 es 39

278
00:12:15,620 --> 00:12:21,459
para resumir vimos las funciones read y

279
00:12:18,919 --> 00:12:23,778
wright para leer y escribir

280
00:12:21,458 --> 00:12:26,179
respectivamente una celda de memoria

281
00:12:23,778 --> 00:12:28,999
pero qué sucede si por ejemplo deseamos

282
00:12:26,179 --> 00:12:31,789
almacenar un valor entero 1 de punto

283
00:12:28,999 --> 00:12:35,659
flotante o una cadena de caracteres un

284
00:12:31,789 --> 00:12:38,899
número entero int ocupa 2 gbytes dos

285
00:12:35,659 --> 00:12:44,889
celdas de la memoria vram para un rango

286
00:12:38,899 --> 00:12:51,259
con signo desde menos 32 768 a 32 mil

287
00:12:44,889 --> 00:12:54,470
767 o sin signo de 0 a 65 mil 535 en

288
00:12:51,259 --> 00:12:57,649
decimal un valor flow de punto o coma

289
00:12:54,470 --> 00:13:00,528
decimal ocupa 4 bytes 4 celdas de

290
00:12:57,649 --> 00:13:02,919
memoria y una cadena de caracteres puede

291
00:13:00,528 --> 00:13:05,448
ocupar una cantidad de en ebay

292
00:13:02,919 --> 00:13:07,969
dependiendo de la longitud de la cadena

293
00:13:05,448 --> 00:13:10,578
para manejar de forma simple este tipo

294
00:13:07,970 --> 00:13:13,489
de casos existen dos funciones

295
00:13:10,578 --> 00:13:16,938
especiales que vienen en ayuda del green

296
00:13:13,489 --> 00:13:20,629
y wright y serán las denominadas get it

297
00:13:16,938 --> 00:13:23,539
gets se usará para leer la memoria y put

298
00:13:20,629 --> 00:13:26,058
para escribir en ella y están pensadas

299
00:13:23,539 --> 00:13:29,238
para despreocuparnos por la longitud del

300
00:13:26,058 --> 00:13:32,719
contenido al leer o escribir comencemos

301
00:13:29,239 --> 00:13:35,600
por get tendrá dos parámetros el primero

302
00:13:32,720 --> 00:13:38,389
es la dirección de inicio y el segundo

303
00:13:35,600 --> 00:13:40,999
el dato la idea es no estar pensando en

304
00:13:38,389 --> 00:13:44,119
cuántas celdas de memoria son necesarias

305
00:13:40,999 --> 00:13:46,850
leer si se trata de un entero un punto

306
00:13:44,119 --> 00:13:49,040
flotante o una cadena de caracteres la

307
00:13:46,850 --> 00:13:52,069
dirección de inicio indica desde qué

308
00:13:49,039 --> 00:13:54,498
posición en la memoria debe comenzar a

309
00:13:52,068 --> 00:13:57,649
leer y dato es la variable que

310
00:13:54,499 --> 00:14:00,079
almacenamos y de forma automática la

311
00:13:57,649 --> 00:14:02,720
función obtiene la cantidad de celdas

312
00:14:00,078 --> 00:14:05,088
necesarias aquí vemos un ejemplo donde

313
00:14:02,720 --> 00:14:08,119
tenemos una variable del tipo entera

314
00:14:05,089 --> 00:14:10,939
denominada valor pot que podría ser el

315
00:14:08,119 --> 00:14:12,129
valor leído de una entrada analógica con

316
00:14:10,938 --> 00:14:17,389
un valor de

317
00:14:12,129 --> 00:14:20,480
768 el cual es claramente mayor a 255 y

318
00:14:17,389 --> 00:14:22,639
por ese motivo ocupará dos bytes dos

319
00:14:20,480 --> 00:14:24,980
celdas de memoria en algún punto del

320
00:14:22,639 --> 00:14:27,740
programa estaremos almacenando dicho

321
00:14:24,980 --> 00:14:29,778
valor en la posición cero lo veremos en

322
00:14:27,740 --> 00:14:32,180
breve con la función put para el

323
00:14:29,778 --> 00:14:35,149
propósito de ejemplo deseamos aplicar la

324
00:14:32,179 --> 00:14:39,289
función get por eso aquí vemos hebrón

325
00:14:35,149 --> 00:14:41,929
punto get entre paréntesis cero coma

326
00:14:39,289 --> 00:14:44,929
valor por lo que estamos diciendo es que

327
00:14:41,929 --> 00:14:48,379
queremos leer la crom desde la dirección

328
00:14:44,929 --> 00:14:51,229
0 y la cantidad de celdas estará dado

329
00:14:48,379 --> 00:14:53,809
por la propia variable valor por la

330
00:14:51,230 --> 00:14:57,110
función get de forma automática vicky

331
00:14:53,809 --> 00:14:59,750
valor pot fue definida como entera por

332
00:14:57,110 --> 00:15:03,230
eso sabe que debe leer dos celdas de

333
00:14:59,750 --> 00:15:05,870
memoria la número 0 y la número 1 en

334
00:15:03,230 --> 00:15:08,450
definitiva nosotros le decimos el punto

335
00:15:05,870 --> 00:15:10,750
inicial desde donde debe comenzar a leer

336
00:15:08,450 --> 00:15:14,149
y dejamos que calcula automáticamente

337
00:15:10,750 --> 00:15:17,839
cuántas celdas son las necesarias como

338
00:15:14,149 --> 00:15:20,269
valor pot es entera será dos celdas si

339
00:15:17,839 --> 00:15:23,180
usáramos otra variable que la definimos

340
00:15:20,269 --> 00:15:25,339
como float entonces sigue te sabe que

341
00:15:23,179 --> 00:15:28,878
debe leer cuatro celdas de memoria

342
00:15:25,339 --> 00:15:32,239
comenzando desde la cero es decir la 0 1

343
00:15:28,879 --> 00:15:34,489
2 y 3 ya en la programación veremos un

344
00:15:32,239 --> 00:15:36,860
ejemplo para leer una variable del tipo

345
00:15:34,489 --> 00:15:39,470
flow otro ejemplo es si queremos leer

346
00:15:36,860 --> 00:15:41,869
una cadena de caracteres supongamos que

347
00:15:39,470 --> 00:15:44,809
aquí tenemos un texto largo que está

348
00:15:41,869 --> 00:15:46,639
almacenado en la memoria from si quiero

349
00:15:44,808 --> 00:15:49,129
leerlo es sólo cuestión de usar la

350
00:15:46,639 --> 00:15:51,769
función get indicarle la dirección de

351
00:15:49,129 --> 00:15:54,499
inicio y como segundo parámetro la

352
00:15:51,769 --> 00:15:57,558
cadena cuántas celdas ocupa el texto

353
00:15:54,499 --> 00:16:00,889
realmente no lo sé tendría que contarlo

354
00:15:57,558 --> 00:16:03,798
pero no es necesario get se encargará de

355
00:16:00,889 --> 00:16:06,019
este trabajo por nosotros y de allí la

356
00:16:03,798 --> 00:16:09,499
utilidad de la función veamos ahora

357
00:16:06,019 --> 00:16:12,289
punto viene el rescate de wright a la

358
00:16:09,499 --> 00:16:14,569
hora de escribir múltiples celdas de la

359
00:16:12,289 --> 00:16:16,730
misma manera que jets era cuestión de

360
00:16:14,568 --> 00:16:19,448
tan solo indicarle la dirección de

361
00:16:16,730 --> 00:16:22,999
inicio es decir desde qué dirección

362
00:16:19,448 --> 00:16:26,058
comenzar a escribir y el dato a escribir

363
00:16:22,999 --> 00:16:28,129
que podrá ser un entero punto flotante o

364
00:16:26,058 --> 00:16:31,250
cadena de caracteres nos despreocupamos

365
00:16:28,129 --> 00:16:33,409
en la cantidad de celdas para la función

366
00:16:31,250 --> 00:16:35,929
para el cálculo en base al tipo de

367
00:16:33,409 --> 00:16:37,819
variable o la longitud de la cadena un

368
00:16:35,929 --> 00:16:40,399
beneficio adicional que tiene el uso de

369
00:16:37,820 --> 00:16:42,500
la función put es que nos ayudará a

370
00:16:40,399 --> 00:16:45,528
preservar la vida útil de la memoria

371
00:16:42,500 --> 00:16:48,470
esto lo hace escribiendo únicamente si

372
00:16:45,528 --> 00:16:51,289
el dato es distinto al existente por

373
00:16:48,470 --> 00:16:52,509
ejemplo si invocamos la función put con

374
00:16:51,289 --> 00:16:56,539
un valor de

375
00:16:52,509 --> 00:16:59,439
768 desde la dirección 0 y ese valor ya

376
00:16:56,539 --> 00:17:02,049
existe entonces no vuelve a escribirlo

377
00:16:59,440 --> 00:17:04,910
evitando de esa forma escrituras

378
00:17:02,049 --> 00:17:07,609
innecesarias veamos en este programa un

379
00:17:04,910 --> 00:17:09,890
ejemplo para su implementación de manera

380
00:17:07,609 --> 00:17:12,409
que quede fijado el concepto crearemos

381
00:17:09,890 --> 00:17:14,900
una variable del tipo flow con el nombre

382
00:17:12,410 --> 00:17:16,390
de temperatura y le asignamos un valor

383
00:17:14,900 --> 00:17:19,640
de

384
00:17:16,390 --> 00:17:21,759
27.50 este es un valor arbitrario pero

385
00:17:19,640 --> 00:17:24,770
podría ser por ejemplo el valor

386
00:17:21,759 --> 00:17:27,619
personalizado que selecciona un usuario

387
00:17:24,769 --> 00:17:30,200
de un sensor de temperatura que activa

388
00:17:27,619 --> 00:17:32,419
un relé podemos dejarla el usuario que

389
00:17:30,200 --> 00:17:35,120
asigna el valor que desee y el mismo

390
00:17:32,420 --> 00:17:37,639
quedará guardado incluso luego de una de

391
00:17:35,119 --> 00:17:40,128
scola de la alimentación crearemos

392
00:17:37,638 --> 00:17:42,678
también una cadena de caracteres con un

393
00:17:40,128 --> 00:17:45,259
texto cualquiera la idea es dejar en

394
00:17:42,679 --> 00:17:47,840
claro que no nos interesa demasiado la

395
00:17:45,259 --> 00:17:50,210
longitud de la cadena ya que la función

396
00:17:47,839 --> 00:17:52,728
puig se encargará por nosotros del

397
00:17:50,210 --> 00:17:55,519
cálculo inicial izamos la comunicación

398
00:17:52,729 --> 00:17:59,528
serie e inmediatamente utilizamos el

399
00:17:55,519 --> 00:18:02,599
prom punto punto entre paréntesis 0

400
00:17:59,528 --> 00:18:04,898
temperatura de esa forma simplemente

401
00:18:02,599 --> 00:18:08,329
guardamos ese

402
00:18:04,898 --> 00:18:11,508
27.50 en la memoria prom desde la

403
00:18:08,329 --> 00:18:14,329
dirección 0 ya sabemos que ocupará 4

404
00:18:11,509 --> 00:18:16,999
bytes por ser de punto flotante pero

405
00:18:14,329 --> 00:18:18,978
podría ser un entero y para nosotros la

406
00:18:16,999 --> 00:18:20,960
función no cambia

407
00:18:18,979 --> 00:18:23,720
simplemente colocamos en el nombre de la

408
00:18:20,960 --> 00:18:25,848
variable y put para el cálculo de

409
00:18:23,720 --> 00:18:28,069
cuántas celdas se requieren luego

410
00:18:25,848 --> 00:18:30,288
guardaremos en memoria la cadena de

411
00:18:28,069 --> 00:18:33,470
caracteres comenzando desde la dirección

412
00:18:30,288 --> 00:18:35,929
10 aquí la dirección 10 podría ser

413
00:18:33,470 --> 00:18:38,450
cualquier otra y sólo para recordar

414
00:18:35,929 --> 00:18:40,909
fácilmente la ubicación del contenido

415
00:18:38,450 --> 00:18:42,410
podríamos comenzar a guardar la cadena

416
00:18:40,909 --> 00:18:45,020
desde la posición

417
00:18:42,410 --> 00:18:47,150
qué sería lo mismo lo único que

418
00:18:45,019 --> 00:18:49,789
deberemos recordar si estamos haciendo

419
00:18:47,150 --> 00:18:52,130
un proyecto es la dirección en donde

420
00:18:49,789 --> 00:18:54,950
almacenamos las variables el uso de

421
00:18:52,130 --> 00:18:57,590
comentarios nos facilitará la vida si

422
00:18:54,950 --> 00:19:00,769
más adelante debemos hacer cambios a un

423
00:18:57,589 --> 00:19:03,139
proyecto que quizás ya ni recordemos

424
00:19:00,769 --> 00:19:05,690
cómo lo hemos organizado para este

425
00:19:03,140 --> 00:19:08,300
ejemplo es fácil en la dirección 0

426
00:19:05,690 --> 00:19:11,269
tendremos el valor de punto flotante y

427
00:19:08,299 --> 00:19:13,399
en la dirección 10 la cadena sólo resta

428
00:19:11,269 --> 00:19:15,349
mostrar en el monitor serie estos

429
00:19:13,400 --> 00:19:17,540
valores almacenados a modo de

430
00:19:15,349 --> 00:19:20,899
verificación de que la escritura fue

431
00:19:17,539 --> 00:19:23,750
correcta con una línea de valor de punto

432
00:19:20,900 --> 00:19:26,330
flotante en dirección 0 y en la

433
00:19:23,750 --> 00:19:29,480
siguiente línea dentro del serial punto

434
00:19:26,329 --> 00:19:33,589
print line invocamos la función get con

435
00:19:29,480 --> 00:19:35,900
cero coma temperatura y listo un espacio

436
00:19:33,589 --> 00:19:38,359
en blanco por una cuestión visual y

437
00:19:35,900 --> 00:19:41,390
misma metodología para mostrar el valor

438
00:19:38,359 --> 00:19:46,009
de la cadena en la dirección 10 con

439
00:19:41,390 --> 00:19:49,250
broun punto get 10 cadena vamos entonces

440
00:19:46,009 --> 00:19:52,129
a verificar subir el programa y abrir el

441
00:19:49,250 --> 00:19:54,410
monitor serie se muestra como no podía

442
00:19:52,130 --> 00:19:57,790
ser de otra manera valor de punto

443
00:19:54,410 --> 00:20:00,620
flotante en dirección cero

444
00:19:57,789 --> 00:20:04,190
27.50 y valor de la cadena en la

445
00:20:00,619 --> 00:20:06,319
dirección 10 hola esta es una prueba eso

446
00:20:04,190 --> 00:20:08,360
es todo por este capítulo recordad que

447
00:20:06,319 --> 00:20:10,549
el código de los programas vistos en

448
00:20:08,359 --> 00:20:12,949
este capítulo y el de todos los

449
00:20:10,549 --> 00:20:15,379
capítulos se encuentra disponible para

450
00:20:12,950 --> 00:20:17,960
descargar desde el enlace en la zona de

451
00:20:15,380 --> 00:20:20,450
descripción como siempre te pido te

452
00:20:17,960 --> 00:20:22,610
suscribas si aún no lo has hecho y por

453
00:20:20,450 --> 00:20:25,250
cualquier duda o comentario lo podéis

454
00:20:22,609 --> 00:20:29,139
hacer debajo que con gusto te responderé

455
00:20:25,250 --> 00:20:29,140
chau y hasta la próxima

