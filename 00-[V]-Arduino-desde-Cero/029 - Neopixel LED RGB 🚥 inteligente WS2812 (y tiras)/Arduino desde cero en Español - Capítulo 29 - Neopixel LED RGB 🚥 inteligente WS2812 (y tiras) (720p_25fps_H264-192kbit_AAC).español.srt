1
00:00:01,740 --> 00:00:08,160
hola a todos y bienvenidos al capítulo

2
00:00:04,559 --> 00:00:10,109
29 de arduino desde cero en español

3
00:00:08,160 --> 00:00:13,379
en esta oportunidad aprenderemos a

4
00:00:10,109 --> 00:00:16,320
trabajar con el led rgb inteligente

5
00:00:13,378 --> 00:00:19,768
comúnmente llamado el neo pixel modelo

6
00:00:16,320 --> 00:00:22,980
doble veces 28 12 en el cap su lado es

7
00:00:19,768 --> 00:00:26,129
muy compacto de tan sólo 5 milímetros de

8
00:00:22,980 --> 00:00:29,099
lado y al igual que el led rgb visto en

9
00:00:26,129 --> 00:00:31,678
el capítulo 12 tendrá tres emisores de

10
00:00:29,099 --> 00:00:34,350
luz para los colores rojo verde y azul

11
00:00:31,678 --> 00:00:37,140
la gran diferencia radica en que el cne

12
00:00:34,350 --> 00:00:39,750
o pixel incorpora dentro del encapsulado

13
00:00:37,140 --> 00:00:42,450
un microchip que aquí se puede ver en

14
00:00:39,750 --> 00:00:44,880
color negro este microchip se encargará

15
00:00:42,450 --> 00:00:47,609
de controlar a los componentes rojo

16
00:00:44,880 --> 00:00:50,219
verde y azul de manera que nuestra tarea

17
00:00:47,609 --> 00:00:52,890
será de enviarle comandos desde arduino

18
00:00:50,219 --> 00:00:56,070
para indicarle qué color o colores

19
00:00:52,890 --> 00:00:58,890
deseamos encender y el brillo todo esto

20
00:00:56,070 --> 00:01:01,890
mediante una sola línea de control en la

21
00:00:58,890 --> 00:01:04,379
práctica utilizaremos una tira de 8 cne

22
00:01:01,890 --> 00:01:07,379
o pixel a cada elemento se lo llama

23
00:01:04,379 --> 00:01:08,120
simplemente pixel y tiene la capacidad

24
00:01:07,379 --> 00:01:10,699
única

25
00:01:08,120 --> 00:01:13,100
poder encadenarse con otro de manera que

26
00:01:10,700 --> 00:01:15,280
los comandos recibidos desde arduino al

27
00:01:13,099 --> 00:01:18,439
primer píxel son enviados de forma

28
00:01:15,280 --> 00:01:20,840
automática al siguiente que se encuentra

29
00:01:18,439 --> 00:01:23,480
en la cadena existen varios modelos en

30
00:01:20,840 --> 00:01:28,100
el mercado pero el más comúnmente usado

31
00:01:23,480 --> 00:01:30,439
es el w s 28 12 que tiene 6 pines de

32
00:01:28,099 --> 00:01:33,769
conexión y es del tipo de montaje

33
00:01:30,439 --> 00:01:36,349
superficial los pines por ese motivo son

34
00:01:33,769 --> 00:01:39,590
muy pequeños y están muy cerca entre sí

35
00:01:36,349 --> 00:01:41,359
y requiere de una soldadura muy precisa

36
00:01:39,590 --> 00:01:44,000
por eso en proyectos prácticos con

37
00:01:41,359 --> 00:01:46,730
protoboard existen pequeñas placas de

38
00:01:44,000 --> 00:01:49,430
circuito impreso donde ya viene soldado

39
00:01:46,730 --> 00:01:52,010
el píxel y luego conexiones para cables

40
00:01:49,430 --> 00:01:54,650
o pines que son más grandes para una

41
00:01:52,010 --> 00:01:57,109
fácil conexión también vienen en tiras

42
00:01:54,650 --> 00:01:59,150
de diversa cantidad de píxeles ya

43
00:01:57,109 --> 00:02:01,969
encadenados pero primero veamos el

44
00:01:59,150 --> 00:02:04,219
significado de cada uno de sus pines la

45
00:02:01,969 --> 00:02:07,640
funcionalidad de los 6 pines del doble

46
00:02:04,219 --> 00:02:11,210
veces 28 12 se reduce a 4 conexiones

47
00:02:07,640 --> 00:02:13,789
básicas tanto veces se como vdd se

48
00:02:11,210 --> 00:02:14,900
conectarán al positivo de tensión que

49
00:02:13,789 --> 00:02:18,438
será de 5

50
00:02:14,900 --> 00:02:20,780
goltz nd como ya es usual será masa o

51
00:02:18,438 --> 00:02:25,969
tierra y luego tenemos los pines de

52
00:02:20,780 --> 00:02:28,848
datos de in y de out el pin nc que viene

53
00:02:25,969 --> 00:02:31,310
de la sigla en inglés no hay conexión no

54
00:02:28,848 --> 00:02:35,060
se conectará mediante el pin denominado

55
00:02:31,310 --> 00:02:37,519
de in que es la contracción de data in o

56
00:02:35,060 --> 00:02:40,128
entrada de datos le enviaremos desde

57
00:02:37,519 --> 00:02:43,340
arduino el comando que deseamos ejecutar

58
00:02:40,128 --> 00:02:45,289
por ejemplo encender el componente rojo

59
00:02:43,340 --> 00:02:49,400
del led el comando se envía de forma

60
00:02:45,289 --> 00:02:53,150
serie por esta única conexión de out que

61
00:02:49,400 --> 00:02:55,789
es data out o salida de datos servirá

62
00:02:53,150 --> 00:02:58,670
para encadenar otro pixel y así se

63
00:02:55,789 --> 00:03:01,098
mantiene una comunicación entre cada uno

64
00:02:58,669 --> 00:03:05,869
de los píxeles ya sea que tengamos un

65
00:03:01,098 --> 00:03:08,268
único pixel 8 30 o 60 sólo necesitaremos

66
00:03:05,870 --> 00:03:11,180
de una sola línea de datos lo cual es

67
00:03:08,269 --> 00:03:13,579
muy conveniente y nos ocupa un solo pin

68
00:03:11,180 --> 00:03:19,099
digital de arduino una versión más

69
00:03:13,579 --> 00:03:21,020
moderna del w s 28 12 es el w s 28 12 b

70
00:03:19,098 --> 00:03:23,449
que tenemos aquí representa

71
00:03:21,020 --> 00:03:26,210
tiene las mismas dimensiones físicas de

72
00:03:23,449 --> 00:03:28,939
5 milímetros de lado pero en vez de 6

73
00:03:26,210 --> 00:03:31,550
pines tendrá sólo 4 que realizan las

74
00:03:28,939 --> 00:03:34,579
mismas funciones vistas de alimentación

75
00:03:31,550 --> 00:03:36,680
entrada y salida de datos en este

76
00:03:34,580 --> 00:03:38,840
diagrama podemos simplificar el proceso

77
00:03:36,680 --> 00:03:41,270
de encadenado de píxeles todos

78
00:03:38,840 --> 00:03:45,110
compartirán el mismo riel de tensión con

79
00:03:41,270 --> 00:03:47,900
bcc en la parte superior de color rojo y

80
00:03:45,110 --> 00:03:50,540
gené de debajo con color negro el primer

81
00:03:47,900 --> 00:03:53,750
píxel de la izquierda conectará su pin

82
00:03:50,539 --> 00:03:57,169
de in a un pin digital de arduino

83
00:03:53,750 --> 00:04:00,530
luego de out del primer pixel se

84
00:03:57,169 --> 00:04:04,579
conectará de forma directa a the in del

85
00:04:00,530 --> 00:04:07,520
segundo pixel de out del segundo a de in

86
00:04:04,580 --> 00:04:09,650
del tercero y así para todos los píxeles

87
00:04:07,520 --> 00:04:12,409
de la tira claro está que también se

88
00:04:09,650 --> 00:04:14,659
pueden encadenar tiras entre sí en esta

89
00:04:12,409 --> 00:04:17,409
imagen posterior de nuestra tira de 8

90
00:04:14,659 --> 00:04:20,540
píxeles del lado izquierdo tendremos

91
00:04:17,410 --> 00:04:23,150
alimentación y data in del lado derecho

92
00:04:20,540 --> 00:04:25,670
continúa el riel de tensión y la

93
00:04:23,149 --> 00:04:27,779
posición donde antes estaba data in

94
00:04:25,670 --> 00:04:30,990
ahora tendremos data

95
00:04:27,779 --> 00:04:34,169
de esta forma si colocamos una segunda

96
00:04:30,990 --> 00:04:37,019
tira el data in de esta segunda tira

97
00:04:34,170 --> 00:04:39,900
queda perfectamente alineado con el data

98
00:04:37,019 --> 00:04:41,879
out de la primera y con solo soldar

99
00:04:39,899 --> 00:04:44,429
cables paralelos entre las tiras

100
00:04:41,879 --> 00:04:47,009
logramos el encadenado hablando de

101
00:04:44,430 --> 00:04:49,199
soldar habrás notado que la tira no

102
00:04:47,009 --> 00:04:51,418
tiene cables ni pines para su conexión

103
00:04:49,199 --> 00:04:54,569
será un trabajo de nuestra parte

104
00:04:51,418 --> 00:04:59,219
soldables tres cables como se ve en esta

105
00:04:54,569 --> 00:05:02,870
imagen para bcc gene de ida time en esta

106
00:04:59,220 --> 00:05:06,780
tira veces se aparece con la indicación

107
00:05:02,870 --> 00:05:09,720
47 bdc puede variar dependiendo del

108
00:05:06,779 --> 00:05:12,449
fabricante yo opté por usar unos cables

109
00:05:09,720 --> 00:05:15,270
de un único conductor que resultan ser

110
00:05:12,449 --> 00:05:17,699
más rígidos que los cables usuales de

111
00:05:15,269 --> 00:05:20,310
varios hilos de cobre si bien se pierde

112
00:05:17,699 --> 00:05:22,769
flexibilidad y gana en facilidad de

113
00:05:20,310 --> 00:05:25,949
conexión a protoboard de manera que este

114
00:05:22,769 --> 00:05:27,899
paso de soldado de cables es necesario y

115
00:05:25,949 --> 00:05:30,149
en caso de que no sepas cómo soldar

116
00:05:27,899 --> 00:05:32,759
deberá solicitarle a alguien que lo haga

117
00:05:30,149 --> 00:05:34,149
por ti ahora si vamos al circuito de

118
00:05:32,759 --> 00:05:37,629
conexión comienza

119
00:05:34,149 --> 00:05:38,949
conectando veces de la tira al positivo

120
00:05:37,629 --> 00:05:42,430
del riel de tensión

121
00:05:38,949 --> 00:05:45,849
gn de amasa del riel de tensión y para

122
00:05:42,430 --> 00:05:50,050
el cable data in pasaremos primero por

123
00:05:45,850 --> 00:05:53,170
una resistencia de 470 oms que tiene las

124
00:05:50,050 --> 00:05:56,230
franjas de colores amarillo violeta y

125
00:05:53,170 --> 00:05:59,560
marrón luego iremos con un cable directo

126
00:05:56,230 --> 00:06:01,629
al pin digital número 2 de arduino esta

127
00:05:59,560 --> 00:06:03,970
resistencia es recomendada por el

128
00:06:01,629 --> 00:06:06,430
fabricante del cne o pixel como medida

129
00:06:03,970 --> 00:06:09,700
de protección a la línea de datos los

130
00:06:06,430 --> 00:06:12,910
valores recomendados son entre 300 y 500

131
00:06:09,699 --> 00:06:16,479
oms de manera que si no dispones de un

132
00:06:12,910 --> 00:06:20,230
valor de 470 podrás usar sin problemas

133
00:06:16,480 --> 00:06:22,150
por ejemplo 330 que solemos usar para

134
00:06:20,230 --> 00:06:23,410
limitar la corriente en leds

135
00:06:22,149 --> 00:06:25,989
convencionales

136
00:06:23,410 --> 00:06:28,540
luego alimentamos protoboard con 5 volts

137
00:06:25,990 --> 00:06:30,639
y genere de arduino un tema importante a

138
00:06:28,540 --> 00:06:33,400
tener en cuenta es el consumo de los

139
00:06:30,639 --> 00:06:35,800
píxeles como en nuestra tira tenemos 8

140
00:06:33,399 --> 00:06:37,989
píxeles encadenados el consumo de

141
00:06:35,800 --> 00:06:40,240
corriente se encuentra al límite de lo

142
00:06:37,990 --> 00:06:40,840
que provee el cable usb de nuestra

143
00:06:40,240 --> 00:06:43,180
computada

144
00:06:40,839 --> 00:06:45,729
así que vamos a alimentar arruino

145
00:06:43,180 --> 00:06:49,418
mediante una fuente externa de tensión

146
00:06:45,730 --> 00:06:51,669
continua de entre 6 y 12 volts luego en

147
00:06:49,418 --> 00:06:53,859
unos minutos nos meteremos de lleno en

148
00:06:51,668 --> 00:06:56,560
la explicación sobre los consumos de

149
00:06:53,860 --> 00:06:59,139
cada pixel pero por ahora es necesario

150
00:06:56,560 --> 00:07:02,168
que sepas que para una tira de hasta 8

151
00:06:59,139 --> 00:07:04,478
píxeles es necesario utilizar una fuente

152
00:07:02,168 --> 00:07:07,539
externa para no poner al límite el

153
00:07:04,478 --> 00:07:10,569
puerto usb de la computadora ya con el

154
00:07:07,540 --> 00:07:13,090
circuito listo veamos el programa para

155
00:07:10,569 --> 00:07:16,029
poder utilizar los neo pixel necesitamos

156
00:07:13,089 --> 00:07:18,310
descargar una librería específica que

157
00:07:16,029 --> 00:07:20,649
nos simplificar a la tarea de enviarle

158
00:07:18,310 --> 00:07:23,110
comandos a cada pixel recordad que

159
00:07:20,649 --> 00:07:26,168
nosotros debemos comunicarnos con el

160
00:07:23,110 --> 00:07:28,569
microchip interno a cada pixel para

161
00:07:26,168 --> 00:07:30,759
indicar la acción a tomar mediante una

162
00:07:28,569 --> 00:07:33,279
única línea de datos lo haremos de la

163
00:07:30,759 --> 00:07:36,430
misma forma que en otros capítulos yendo

164
00:07:33,279 --> 00:07:39,629
al menú programa incluir librería y

165
00:07:36,430 --> 00:07:42,180
luego gestionar librerías

166
00:07:39,629 --> 00:07:44,370
aguardamos unos instantes mientras se

167
00:07:42,180 --> 00:07:48,269
actualiza el listado y en el campo de

168
00:07:44,370 --> 00:07:51,269
búsqueda escribiremos cne o píxel tal

169
00:07:48,269 --> 00:07:53,879
cual y sin espacios esto nos devolverá

170
00:07:51,269 --> 00:07:56,430
una serie de resultados la librería que

171
00:07:53,879 --> 00:08:00,509
queremos instalar es la que dice ayuda

172
00:07:56,430 --> 00:08:03,420
fruto neo pixel by aída fruto que es el

173
00:08:00,509 --> 00:08:06,060
nombre del fabricante la seleccionamos y

174
00:08:03,420 --> 00:08:09,210
luego el botón instalar yo ya la tengo

175
00:08:06,060 --> 00:08:11,699
instalada por eso aparece deshabilitado

176
00:08:09,209 --> 00:08:14,609
el botón pero en tu caso lo estará luego

177
00:08:11,699 --> 00:08:17,310
de unos segundos descarga e instala la

178
00:08:14,610 --> 00:08:20,040
librería deberás ver qué dice install

179
00:08:17,310 --> 00:08:23,160
dos luego resta presionar el botón de

180
00:08:20,040 --> 00:08:25,680
cerrar del gestor de librerías y listo

181
00:08:23,160 --> 00:08:28,110
en la primera línea incluimos la

182
00:08:25,680 --> 00:08:30,959
librería que acabamos de descargar con

183
00:08:28,110 --> 00:08:34,830
el numeral incluso luego crearemos un

184
00:08:30,959 --> 00:08:38,009
objeto del tipo edad fruit guión bajo o

185
00:08:34,830 --> 00:08:39,780
pixel que lo llamaremos tira y le

186
00:08:38,009 --> 00:08:43,168
cargaremos una serie de parámetros

187
00:08:39,779 --> 00:08:45,720
necesarios que son tres en total y se

188
00:08:43,168 --> 00:08:46,470
encuentran enunciados aquí en formato de

189
00:08:45,720 --> 00:08:49,500
comentar

190
00:08:46,470 --> 00:08:51,570
a modo de referencia no te preocupes que

191
00:08:49,500 --> 00:08:53,340
es más simple de lo que parece el primer

192
00:08:51,570 --> 00:08:55,740
parámetro debe ser la cantidad de

193
00:08:53,340 --> 00:08:59,129
píxeles que tiene la tira en nuestro

194
00:08:55,740 --> 00:09:02,220
caso es de 8 por eso aquí colocamos el

195
00:08:59,129 --> 00:09:04,500
número 8 el segundo parámetro es el pin

196
00:09:02,220 --> 00:09:06,450
digital de arduino desde el cual le

197
00:09:04,500 --> 00:09:09,690
enviaremos la información en nuestro

198
00:09:06,450 --> 00:09:12,150
caso es el pin número 2 podrás utilizar

199
00:09:09,690 --> 00:09:15,000
otro pin en caso de que el 2 no

200
00:09:12,149 --> 00:09:17,879
estuviese disponible este team es el que

201
00:09:15,000 --> 00:09:21,090
está conectado mediante la resistencia a

202
00:09:17,879 --> 00:09:23,789
data in de la tira el tercer y último

203
00:09:21,090 --> 00:09:26,100
parámetro es la suma de dos constantes

204
00:09:23,789 --> 00:09:30,769
para nuestra tira constituida por

205
00:09:26,100 --> 00:09:38,269
píxeles del tipo w es 28 12 será neo

206
00:09:30,769 --> 00:09:41,909
guión bajo crv más neo guión bajo khz

207
00:09:38,269 --> 00:09:44,189
800 de esa forma se establece el orden

208
00:09:41,909 --> 00:09:45,209
del flujo de datos y la velocidad de

209
00:09:44,190 --> 00:09:47,880
comunicación

210
00:09:45,210 --> 00:09:50,070
este tercer parámetro difícilmente tenga

211
00:09:47,879 --> 00:09:52,049
que modificar lo ya que es el adecuado

212
00:09:50,070 --> 00:09:56,610
para modelos dobles

213
00:09:52,049 --> 00:09:58,799
de 28 12 y w c 28 12 b solo debería

214
00:09:56,610 --> 00:10:00,930
cambiarse en casos de modelos más

215
00:09:58,799 --> 00:10:03,240
antiguos ahora que tenemos creado el

216
00:10:00,929 --> 00:10:05,729
objeto podremos de manera muy simple

217
00:10:03,240 --> 00:10:08,549
utilizar sus funciones asociadas para

218
00:10:05,730 --> 00:10:10,889
enviar comandos a la tira en el setup

219
00:10:08,549 --> 00:10:14,189
inicializa mos la tira con la función

220
00:10:10,889 --> 00:10:17,039
begin y luego la función show esta

221
00:10:14,190 --> 00:10:19,709
función show lo utilizaremos en breve en

222
00:10:17,039 --> 00:10:21,328
el loop lo que hace es enviar el comando

223
00:10:19,708 --> 00:10:23,939
para mostrar lo que se haya programado

224
00:10:21,328 --> 00:10:25,889
con anterioridad en este caso como

225
00:10:23,940 --> 00:10:29,310
estamos en el setup y la función

226
00:10:25,889 --> 00:10:32,039
anterior solo inicializa la tira show no

227
00:10:29,309 --> 00:10:34,708
muestra nada o lo que es lo mismo deja

228
00:10:32,039 --> 00:10:37,289
todos los píxeles apagados en el loop en

229
00:10:34,708 --> 00:10:40,768
la primer línea utilizaremos la función

230
00:10:37,289 --> 00:10:43,169
set brightness para establecer un valor

231
00:10:40,769 --> 00:10:45,690
de brillo que se aplica a la totalidad

232
00:10:43,169 --> 00:10:47,819
de la tira es una función interesante ya

233
00:10:45,690 --> 00:10:50,579
que no requiere ir estableciendo el

234
00:10:47,820 --> 00:10:53,070
brillo de cada pixel de forma individual

235
00:10:50,578 --> 00:10:55,169
y en la mayoría de los casos prácticos'

236
00:10:53,070 --> 00:10:57,750
lo que se quiere es tener un brillo

237
00:10:55,169 --> 00:10:59,969
constante para todos los pixeles

238
00:10:57,750 --> 00:11:04,769
el parámetro que toma esta función es un

239
00:10:59,970 --> 00:11:09,509
número entre 0 y 255 siendo 0 un brillo

240
00:11:04,769 --> 00:11:12,539
de 0 o apagado y 255 brillo máximo los

241
00:11:09,509 --> 00:11:14,610
neo pixel son extremadamente brillantes

242
00:11:12,539 --> 00:11:17,789
con lo cual con un valor que puede

243
00:11:14,610 --> 00:11:20,669
parecer en un principio muy bajo como es

244
00:11:17,789 --> 00:11:23,309
de 20 se visualizará perfectamente bien

245
00:11:20,669 --> 00:11:25,949
de todas maneras luego te recomiendo que

246
00:11:23,309 --> 00:11:28,379
modifique este valor y vayas probando

247
00:11:25,950 --> 00:11:30,600
los distintos niveles de brillo vas a

248
00:11:28,379 --> 00:11:32,549
ver un par de líneas comentadas que te

249
00:11:30,600 --> 00:11:36,120
pido que no les prestes atención por

250
00:11:32,549 --> 00:11:38,490
ahora luego tenemos la función set pixel

251
00:11:36,120 --> 00:11:41,070
color y es la más importante de la

252
00:11:38,490 --> 00:11:43,769
librería para comandar el pixel esta

253
00:11:41,070 --> 00:11:46,410
función toma cuatro parámetros que se

254
00:11:43,769 --> 00:11:49,230
describen aquí en el comentario el

255
00:11:46,409 --> 00:11:51,299
primer parámetro es la posición como

256
00:11:49,230 --> 00:11:54,420
estamos trabajando con una tira primero

257
00:11:51,299 --> 00:11:56,819
debemos indicar que pixel de la tira es

258
00:11:54,419 --> 00:11:59,189
el que deseamos configurar aquí es

259
00:11:56,820 --> 00:12:01,770
importante tener en cuenta que el primer

260
00:11:59,190 --> 00:12:03,750
elemento de la tira el primer pixel

261
00:12:01,769 --> 00:12:06,629
tiene posición número

262
00:12:03,750 --> 00:12:08,519
también llamado índice es usual en

263
00:12:06,629 --> 00:12:11,039
electrónica que la enumeración de

264
00:12:08,519 --> 00:12:14,100
elementos comiencen con un índice de

265
00:12:11,039 --> 00:12:17,579
cero en lugar de uno entonces el primer

266
00:12:14,100 --> 00:12:21,540
píxel será el de posición 0 el segundo

267
00:12:17,580 --> 00:12:23,970
pixel será el 1 el tercero el 2 y así

268
00:12:21,539 --> 00:12:27,539
hasta el último pixel de esta tira que

269
00:12:23,970 --> 00:12:30,870
tendrá la posición o índice 7 si vamos

270
00:12:27,539 --> 00:12:34,079
al código vemos que la función 7 pixel

271
00:12:30,870 --> 00:12:36,029
color tiene como primer parámetro 0 con

272
00:12:34,080 --> 00:12:38,250
lo cual estamos indicando que

273
00:12:36,029 --> 00:12:40,259
trabajaremos con el primer pixel de la

274
00:12:38,250 --> 00:12:44,129
tira los siguientes tres parámetros

275
00:12:40,259 --> 00:12:48,059
serán los componentes rojo verde y azul

276
00:12:44,129 --> 00:12:49,590
rg y b como ya vimos en el capítulo 12

277
00:12:48,059 --> 00:12:52,709
con la combinación de los colores

278
00:12:49,590 --> 00:12:55,290
primarios rojo verde y azul podemos

279
00:12:52,710 --> 00:12:57,750
lograr un total de 16 millones de

280
00:12:55,289 --> 00:13:00,659
combinaciones posibles de colores cada

281
00:12:57,750 --> 00:13:05,639
componente ocupa 8 bits es decir que

282
00:13:00,659 --> 00:13:09,539
será un número entre 0 y 255 en nuestro

283
00:13:05,639 --> 00:13:13,139
caso vimos que el componente r el rojo

284
00:13:09,539 --> 00:13:17,309
está en cero el componente g el verde

285
00:13:13,139 --> 00:13:20,789
está en 0 y el componente ve el azul

286
00:13:17,309 --> 00:13:23,309
está en 255 con lo cual estaremos

287
00:13:20,789 --> 00:13:25,708
encendiendo el color azul en su

288
00:13:23,309 --> 00:13:28,708
totalidad para resumir entonces la

289
00:13:25,708 --> 00:13:31,018
función 7 pixel color nos permite

290
00:13:28,708 --> 00:13:33,119
indicar el pixel sobre el cual

291
00:13:31,019 --> 00:13:36,539
aplicaremos un determinado color

292
00:13:33,120 --> 00:13:39,690
mediante la paleta rgb finalmente

293
00:13:36,539 --> 00:13:41,730
tenemos la función show esta función es

294
00:13:39,690 --> 00:13:44,339
la que dará el comando para enviar los

295
00:13:41,730 --> 00:13:47,579
datos a la tira que acabamos de definir

296
00:13:44,339 --> 00:13:51,060
con set pixel color es decir que se tics

297
00:13:47,578 --> 00:13:53,250
el color solo configura el pixel pero no

298
00:13:51,059 --> 00:13:56,578
envía el comando para que se muestre

299
00:13:53,250 --> 00:13:58,889
esta tarea la realiza la función show y

300
00:13:56,578 --> 00:14:01,229
ese sería todo el programa completo para

301
00:13:58,889 --> 00:14:04,079
encender el primer pixel de la tira con

302
00:14:01,230 --> 00:14:07,199
color azul solo tres líneas permiten

303
00:14:04,078 --> 00:14:09,899
controlar el brillo la posición y el

304
00:14:07,198 --> 00:14:12,120
color del píxel podríamos subir este

305
00:14:09,899 --> 00:14:14,578
programa arduino y veríamos cómo

306
00:14:12,120 --> 00:14:16,710
enciende el primer pixel con color azul

307
00:14:14,578 --> 00:14:18,509
pero hagamos una pequeña modifica

308
00:14:16,710 --> 00:14:21,389
en el código para hacerlo más

309
00:14:18,509 --> 00:14:24,450
interesante vamos a descontar las líneas

310
00:14:21,389 --> 00:14:26,639
del bucle for el delay y el cierre de la

311
00:14:24,450 --> 00:14:28,890
llave del bucle la idea es ir

312
00:14:26,639 --> 00:14:31,379
encendiendo cada uno de los píxeles de

313
00:14:28,889 --> 00:14:34,110
la tira para eso nos viene bien el bucle

314
00:14:31,379 --> 00:14:36,929
foro como ya lo vimos hace tiempo

315
00:14:34,110 --> 00:14:39,930
definimos una variable para controlar el

316
00:14:36,929 --> 00:14:43,199
número de iteraciones del bucle por eso

317
00:14:39,929 --> 00:14:46,739
declaramos aquí mismo la variable y del

318
00:14:43,200 --> 00:14:48,660
tipo entera y le cargamos un valor de 0

319
00:14:46,740 --> 00:14:52,590
de la condición que evalúa para

320
00:14:48,659 --> 00:14:55,469
permanecer dentro del bucle es que y sea

321
00:14:52,590 --> 00:14:58,860
menor que 8 como comentábamos recién

322
00:14:55,470 --> 00:15:01,850
cada pixel tiene una posición o índice

323
00:14:58,860 --> 00:15:05,220
que va de 0 a 7 luego finalmente

324
00:15:01,850 --> 00:15:09,480
establecemos que incrementaremos en 1 la

325
00:15:05,220 --> 00:15:12,389
variable y con cada iteración con i + +

326
00:15:09,480 --> 00:15:14,759
la función set pixel color la

327
00:15:12,389 --> 00:15:17,699
modificaremos ligeramente y colocando en

328
00:15:14,759 --> 00:15:20,220
el primer parámetro la variable y en vez

329
00:15:17,700 --> 00:15:22,200
de 0 antes de la llave del cierre del

330
00:15:20,220 --> 00:15:24,990
bucle vemos un día

331
00:15:22,200 --> 00:15:27,780
con una demora de medio segundo de

332
00:15:24,990 --> 00:15:30,690
manera que sea fácilmente visible el

333
00:15:27,779 --> 00:15:33,600
encendido de cada pixel sin este delay

334
00:15:30,690 --> 00:15:35,220
ejecutaría todo tan rápido que sólo

335
00:15:33,600 --> 00:15:37,920
veríamos la totalidad de la tira

336
00:15:35,220 --> 00:15:40,800
encendida de color azul vamos a

337
00:15:37,919 --> 00:15:43,829
verificar y subir el programa y veamos

338
00:15:40,799 --> 00:15:45,750
si se comporta de acuerdo a lo esperado

339
00:15:43,830 --> 00:15:48,180
vemos que enciende el primer pixel de

340
00:15:45,750 --> 00:15:51,360
color azul medio segundo después el

341
00:15:48,179 --> 00:15:54,059
segundo y así hasta el último pixel y

342
00:15:51,360 --> 00:15:55,769
luego permanece todo encendido pareciera

343
00:15:54,059 --> 00:15:57,989
que algo no funciona bien pero en

344
00:15:55,769 --> 00:16:00,840
realidad está haciendo exactamente lo

345
00:15:57,990 --> 00:16:04,049
que le programamos con el bucle por cada

346
00:16:00,840 --> 00:16:06,690
iteración mediante la función set pixel

347
00:16:04,049 --> 00:16:09,449
color indica vamos a encender con color

348
00:16:06,690 --> 00:16:12,600
azul el primer pixel luego de medio

349
00:16:09,450 --> 00:16:15,450
segundo que pasará el segundo pixel y

350
00:16:12,600 --> 00:16:17,700
también la encendida de color azul y así

351
00:16:15,450 --> 00:16:20,730
con todos lo que sucede es que cuando

352
00:16:17,700 --> 00:16:24,120
encendemos el primer pixel y pasamos al

353
00:16:20,730 --> 00:16:26,670
segundo el primero sigue encendido y eso

354
00:16:24,120 --> 00:16:28,200
es correcto porque no le enviamos ningún

355
00:16:26,669 --> 00:16:31,259
comando para apagarlo

356
00:16:28,200 --> 00:16:33,330
sólo fuimos de un píxel en orden desde

357
00:16:31,259 --> 00:16:35,939
el primero hasta el último con el

358
00:16:33,330 --> 00:16:38,160
comando de encender en color azul y

359
00:16:35,940 --> 00:16:40,650
cuando finaliza el bucle se vuelve a

360
00:16:38,159 --> 00:16:43,199
ejecutar la primera línea del loop donde

361
00:16:40,649 --> 00:16:45,659
cada pixel ya se encuentra encendido en

362
00:16:43,200 --> 00:16:48,060
color azul con lo cual no percibimos

363
00:16:45,659 --> 00:16:50,610
ningún cambio en definitiva cuando

364
00:16:48,059 --> 00:16:53,429
enviamos un comando a un píxel este lo

365
00:16:50,610 --> 00:16:56,310
ejecuta y se queda así hasta que le

366
00:16:53,429 --> 00:16:58,799
enviamos otro comando una forma simple

367
00:16:56,309 --> 00:17:01,589
de apagar todos los pixeles es mediante

368
00:16:58,799 --> 00:17:04,230
la función clear vamos a agregarla aquí

369
00:17:01,590 --> 00:17:06,600
al final del código antes del cierre del

370
00:17:04,230 --> 00:17:09,000
loop lo que lograremos es que una vez

371
00:17:06,599 --> 00:17:11,879
que se encienda el último pixel de la

372
00:17:09,000 --> 00:17:13,680
tira se apaguen todos los pixeles y de

373
00:17:11,880 --> 00:17:16,140
esa manera cuando se vuelva a ingresar

374
00:17:13,680 --> 00:17:19,920
al bucle veremos cómo se van encendiendo

375
00:17:16,140 --> 00:17:23,370
de a1 sumamos el código ahora con esta

376
00:17:19,920 --> 00:17:25,320
función clear y veamos el resultado se

377
00:17:23,369 --> 00:17:28,469
puede ver que comienza como antes

378
00:17:25,319 --> 00:17:30,809
encendiendo de a 1 cada pixel pero luego

379
00:17:28,470 --> 00:17:33,809
de encender el último brevemente se

380
00:17:30,809 --> 00:17:34,919
apagan todos y comienzan nuevamente para

381
00:17:33,809 --> 00:17:37,079
probar con otro

382
00:17:34,920 --> 00:17:40,380
vamos a copiar todo este bloque de

383
00:17:37,079 --> 00:17:42,929
código y pegarlo debajo modificaremos el

384
00:17:40,380 --> 00:17:46,170
bucle for para que comience desde el

385
00:17:42,930 --> 00:17:48,259
último pixel y vayan de incrementando de

386
00:17:46,170 --> 00:17:50,970
a uno hasta llegar al primero

387
00:17:48,259 --> 00:17:53,430
exactamente opuesto a la anterior esto

388
00:17:50,970 --> 00:17:56,789
lo hacemos muy fácil iniciamos con un

389
00:17:53,430 --> 00:17:58,769
valor de la variable y igual a 7 la

390
00:17:56,789 --> 00:18:02,490
condición para permanecer dentro del

391
00:17:58,769 --> 00:18:06,210
bucle será que y debe ser mayor o igual

392
00:18:02,490 --> 00:18:09,870
a 0 y con cada iteración debemos de

393
00:18:06,210 --> 00:18:13,410
incrementar en 1 por eso cambiamos y + +

394
00:18:09,869 --> 00:18:16,679
por y menos menos en la función set

395
00:18:13,410 --> 00:18:20,580
pixel color cambiamos a un color rojo de

396
00:18:16,680 --> 00:18:23,940
manera que colocaremos 255 en la

397
00:18:20,579 --> 00:18:28,199
posición del componente r y dejaremos en

398
00:18:23,940 --> 00:18:31,049
0 tanto el verde como el azul y eso es

399
00:18:28,200 --> 00:18:33,360
todo en este caso no conviene dejar la

400
00:18:31,049 --> 00:18:36,509
función clear ya que lograremos un

401
00:18:33,359 --> 00:18:39,750
efecto continuo desde el azul y luego

402
00:18:36,509 --> 00:18:41,569
pasando al rojo así que eliminaremos el

403
00:18:39,750 --> 00:18:44,390
tira punto

404
00:18:41,569 --> 00:18:46,879
subamos este programa y veamos qué

405
00:18:44,390 --> 00:18:48,980
sucede al igual que antes comienza

406
00:18:46,880 --> 00:18:51,350
encendiendo desde el primer píxel con

407
00:18:48,980 --> 00:18:54,650
color azul hasta el último luego

408
00:18:51,349 --> 00:18:57,649
cambiará a rojo desde el último hacia el

409
00:18:54,650 --> 00:19:00,620
primero y luego repite el proceso y da

410
00:18:57,650 --> 00:19:02,690
un efecto interesante veamos un último

411
00:19:00,619 --> 00:19:05,269
ejemplo supongamos que ya no queremos

412
00:19:02,690 --> 00:19:07,850
que estén todos los pixeles siempre

413
00:19:05,269 --> 00:19:10,369
encendidos queremos que vaya encendiendo

414
00:19:07,849 --> 00:19:13,309
de a uno por vez pero el resto quede

415
00:19:10,369 --> 00:19:16,250
apagado esto se logra apagando el pixel

416
00:19:13,309 --> 00:19:19,669
antes de ir al siguiente de forma muy

417
00:19:16,250 --> 00:19:22,390
simple vamos al primer bucle for el que

418
00:19:19,670 --> 00:19:25,130
enciende los píxeles de color azul

419
00:19:22,390 --> 00:19:28,310
comenzando desde el primero luego de la

420
00:19:25,130 --> 00:19:31,950
línea del delay dejemos un espacio y

421
00:19:28,309 --> 00:19:39,450
escribamos tira punto

422
00:19:31,950 --> 00:19:41,940
el pixel color y 0 0 0

423
00:19:39,450 --> 00:19:44,580
de esa forma logramos apagar el pixel

424
00:19:41,940 --> 00:19:47,519
luego de haberlo mantenido encendido por

425
00:19:44,579 --> 00:19:50,278
medio segundo apagar un píxel es tan

426
00:19:47,519 --> 00:19:53,130
simple como cargar los valores de 0 en

427
00:19:50,278 --> 00:19:56,278
todos los componentes rojo verde y azul

428
00:19:53,130 --> 00:19:59,100
pero necesitamos una línea más recordad

429
00:19:56,278 --> 00:20:01,349
que ese pixel color configura el pixel

430
00:19:59,099 --> 00:20:04,678
pero no lo muestra por eso debemos

431
00:20:01,349 --> 00:20:08,759
aplicar nuevamente la función show con

432
00:20:04,679 --> 00:20:11,370
tira punto show ahora sí con esas dos

433
00:20:08,759 --> 00:20:14,220
líneas logramos que se apague el pixel

434
00:20:11,369 --> 00:20:16,739
copiamos estas líneas y pedimos las en

435
00:20:14,220 --> 00:20:20,100
el segundo bucle quedando de esta manera

436
00:20:16,740 --> 00:20:22,919
vamos a subir el programa y verifiquemos

437
00:20:20,099 --> 00:20:25,469
que se comporta correctamente como se

438
00:20:22,919 --> 00:20:28,230
puede ver enciende los píxeles de a1

439
00:20:25,470 --> 00:20:31,019
luego del primero va al segundo pero

440
00:20:28,230 --> 00:20:33,089
antes apaga el pixel anterior y así con

441
00:20:31,019 --> 00:20:36,299
el color azul hasta llegar al último

442
00:20:33,089 --> 00:20:39,059
pixel luego comienza de atrás

443
00:20:36,299 --> 00:20:42,119
adelante con el mismo efecto en color

444
00:20:39,059 --> 00:20:44,399
rojo este es el momento para que juegues

445
00:20:42,119 --> 00:20:48,059
un poco con el código podrás modificar

446
00:20:44,400 --> 00:20:50,910
el valor del brillo en la primer línea y

447
00:20:48,059 --> 00:20:54,809
así ver cuán brillante es con intensidad

448
00:20:50,910 --> 00:20:57,840
máxima de 255 también podrías cambiar

449
00:20:54,809 --> 00:21:00,929
los colores de las funciones set pixel

450
00:20:57,839 --> 00:21:04,230
color o modificar los delay para hacer

451
00:21:00,930 --> 00:21:06,810
más rápida o más lenta la transición

452
00:21:04,230 --> 00:21:09,120
quiero dedicarle unos minutos a un tema

453
00:21:06,809 --> 00:21:12,599
importante que es el consumo de energía

454
00:21:09,119 --> 00:21:14,759
algo fundamental necesario de calcular a

455
00:21:12,599 --> 00:21:17,609
la hora de llevar un proyecto a la

456
00:21:14,759 --> 00:21:20,940
práctica en promedio cada componente del

457
00:21:17,609 --> 00:21:24,509
pixel es decir el rojo verde o azul

458
00:21:20,940 --> 00:21:27,269
tiene un consumo de 20 mil jumper en la

459
00:21:24,509 --> 00:21:30,359
práctica cuando encendemos un píxel en

460
00:21:27,269 --> 00:21:32,970
color azul estábamos consumiendo 20 mil

461
00:21:30,359 --> 00:21:35,250
jumper por cada pixel el consumo de

462
00:21:32,970 --> 00:21:36,569
corriente máximo se produce cuando los

463
00:21:35,250 --> 00:21:40,349
tres componentes

464
00:21:36,569 --> 00:21:42,089
rg ive están encendidos al mismo tiempo

465
00:21:40,349 --> 00:21:49,288
una función set

466
00:21:42,089 --> 00:21:51,298
el color con 255 255 y 255 da como

467
00:21:49,288 --> 00:21:54,119
resultado el color blanco

468
00:21:51,298 --> 00:21:58,168
en este caso el consumo será de 60.000

469
00:21:54,119 --> 00:22:01,469
jumper 20000 jumper de cada componente x

470
00:21:58,169 --> 00:22:04,080
3 veamos entonces nuestra tira de 8

471
00:22:01,470 --> 00:22:07,490
píxeles encadenados tendremos que para

472
00:22:04,079 --> 00:22:11,519
esta tira el consumo promedio sería de

473
00:22:07,490 --> 00:22:15,500
160 mil jumper 20 mil jumper por 8 y el

474
00:22:11,519 --> 00:22:18,599
consumo máximo sería de 480 mil jumper

475
00:22:15,500 --> 00:22:21,200
60.000 amperes por 8 lo que debe quedar

476
00:22:18,599 --> 00:22:24,119
claro es que el consumo de cada pixel

477
00:22:21,200 --> 00:22:27,600
depende de qué cantidad de componente de

478
00:22:24,119 --> 00:22:29,668
color esté encendido al mismo tiempo y

479
00:22:27,599 --> 00:22:32,009
el de una tira será el consumo

480
00:22:29,669 --> 00:22:35,220
individual multiplicado por la cantidad

481
00:22:32,009 --> 00:22:38,429
de píxeles de la tira con esto en mente

482
00:22:35,220 --> 00:22:40,710
veamos nuestra placa arduino 1 cuando

483
00:22:38,429 --> 00:22:42,929
comenzamos el capítulo te decía que era

484
00:22:40,710 --> 00:22:46,079
conveniente alimentar arduino con una

485
00:22:42,929 --> 00:22:47,870
fuente externa y que funcionaría con una

486
00:22:46,079 --> 00:22:50,179
tira de hasta 8

487
00:22:47,869 --> 00:22:52,729
y resulta que cuando conectamos una

488
00:22:50,180 --> 00:22:55,730
fuente de alimentación al jack de

489
00:22:52,730 --> 00:22:57,950
arduino la tensión es aplicada a este

490
00:22:55,730 --> 00:23:00,529
pequeño amigo que es el regulador de

491
00:22:57,950 --> 00:23:04,220
atención este componente acepta

492
00:23:00,529 --> 00:23:06,529
atenciones variadas entre 6 y 12 volts y

493
00:23:04,220 --> 00:23:09,529
brinda a su salida una atención

494
00:23:06,529 --> 00:23:12,470
constante de 5 volts pero este regulador

495
00:23:09,529 --> 00:23:15,289
tiene un límite respecto de la corriente

496
00:23:12,470 --> 00:23:18,049
máxima que puede entregar y es de 500

497
00:23:15,289 --> 00:23:20,869
mil jumper si conectamos un dispositivo

498
00:23:18,049 --> 00:23:24,319
al pin de 5 volts de arduino con una

499
00:23:20,869 --> 00:23:26,359
fuente externa y consume más de 500 mil

500
00:23:24,319 --> 00:23:28,639
jumper terminaremos por quemar el

501
00:23:26,359 --> 00:23:31,308
regulador esto viene a cuenta de que

502
00:23:28,640 --> 00:23:35,390
como vimos recién el consumo máximo de

503
00:23:31,308 --> 00:23:38,000
una tira de 8 píxeles es de 480 mil

504
00:23:35,390 --> 00:23:40,429
jumper ligeramente menor a la corriente

505
00:23:38,000 --> 00:23:42,829
máxima que puede brindar el regulador

506
00:23:40,429 --> 00:23:45,980
integrado de la placa si bien esta

507
00:23:42,829 --> 00:23:48,740
situación de consumo de 480.000 jumper

508
00:23:45,980 --> 00:23:51,200
se produce únicamente cuando todos los

509
00:23:48,740 --> 00:23:54,269
componentes en neo pixel se encuentran

510
00:23:51,200 --> 00:23:56,940
encendidos al mismo tiempo con el máximo

511
00:23:54,269 --> 00:23:59,308
es algo que puede suceder y no debe

512
00:23:56,940 --> 00:24:01,288
desestimarse así que ahora que sabes

513
00:23:59,308 --> 00:24:04,079
cómo funciona el proceso de regulación

514
00:24:01,288 --> 00:24:06,088
de tensión de la placa de arduino que

515
00:24:04,079 --> 00:24:08,939
servirá para tenerlo en cuenta para

516
00:24:06,088 --> 00:24:11,819
otros proyectos que lleves a cabo tener

517
00:24:08,940 --> 00:24:14,070
un regulador incorporado la placa es muy

518
00:24:11,819 --> 00:24:16,588
útil pero es necesario saber sus

519
00:24:14,069 --> 00:24:19,259
limitaciones toda esta introducción es

520
00:24:16,588 --> 00:24:22,168
para que veas cómo proceder si deseamos

521
00:24:19,259 --> 00:24:26,578
utilizar tiras de neo pixel mucho más

522
00:24:22,169 --> 00:24:28,559
grandes de 30 60 o más píxeles para esos

523
00:24:26,578 --> 00:24:31,440
casos se requiere una fuente de

524
00:24:28,558 --> 00:24:34,168
alimentación totalmente independiente

525
00:24:31,440 --> 00:24:36,239
que no pase por el regulador incorporado

526
00:24:34,169 --> 00:24:37,889
de arduino y con un suministro de

527
00:24:36,239 --> 00:24:40,078
corriente adecuado

528
00:24:37,888 --> 00:24:42,628
este circuito sirve de referencia para

529
00:24:40,078 --> 00:24:45,450
esos casos no se colocó una protocolos

530
00:24:42,628 --> 00:24:48,449
para no complicar verás que el pin data

531
00:24:45,450 --> 00:24:50,940
in de la tira con el cable de color

532
00:24:48,450 --> 00:24:54,088
verde sigue estando conectado al pin

533
00:24:50,940 --> 00:24:58,139
digital número 2 de arduino mediante la

534
00:24:54,088 --> 00:25:00,569
resistencia de 470 oms como antes la

535
00:24:58,138 --> 00:25:02,699
diferencia es que ahora debemos utilizar

536
00:25:00,569 --> 00:25:06,058
porque una fuente de tensión externa

537
00:25:02,700 --> 00:25:09,389
regulada de 5 volts que se encargará

538
00:25:06,058 --> 00:25:11,908
únicamente de alimentar la tira aquí no

539
00:25:09,388 --> 00:25:14,939
podremos utilizar una fuente de diversas

540
00:25:11,909 --> 00:25:18,509
tensiones debe ser de exactamente 5

541
00:25:14,940 --> 00:25:22,200
volts el positivo se conecta a veces se

542
00:25:18,509 --> 00:25:24,210
de la tira y el negativo genere y es muy

543
00:25:22,200 --> 00:25:27,480
importante que también se conecten

544
00:25:24,210 --> 00:25:30,450
mediante un cable genere de la fuente de

545
00:25:27,480 --> 00:25:33,120
alimentación con género de arduino de

546
00:25:30,450 --> 00:25:36,298
manera que se mantenga una referencia de

547
00:25:33,119 --> 00:25:38,878
más a igual recordad cardui no lo

548
00:25:36,298 --> 00:25:41,730
estamos alimentando con el cable usb de

549
00:25:38,878 --> 00:25:44,099
la computadora y la tira con la fuente

550
00:25:41,730 --> 00:25:47,099
externa tanto arduino como la fuente

551
00:25:44,099 --> 00:25:49,888
deben tener la misma referencia de masa

552
00:25:47,099 --> 00:25:52,888
ya sabemos entonces cómo conectar todo

553
00:25:49,888 --> 00:25:55,168
la fuente debe ser de 5 goltz pero qué

554
00:25:52,888 --> 00:25:58,109
cantidad de corriente debe ser capaz de

555
00:25:55,169 --> 00:26:01,169
entregar para eso tendremos dos ejemplos

556
00:25:58,109 --> 00:26:03,959
uno para una tira de 30 píxeles y otros

557
00:26:01,169 --> 00:26:06,840
por una tira de 60 ya sabemos que cada

558
00:26:03,960 --> 00:26:09,390
pixel tiene un consumo promedio de 20

559
00:26:06,839 --> 00:26:11,689
con lo cual para el caso de la tira de

560
00:26:09,390 --> 00:26:14,970
30 píxeles la fuente de alimentación

561
00:26:11,690 --> 00:26:19,710
debe ser capaz de entregar un mínimo de

562
00:26:14,970 --> 00:26:23,490
600.000 jumper es decir 06 samper y un

563
00:26:19,710 --> 00:26:26,549
valor óptimo de 18 ampliar el valor

564
00:26:23,490 --> 00:26:30,450
óptimo se calcula en base a un consumo

565
00:26:26,549 --> 00:26:35,039
máximo por píxel de 60000 jumper por eso

566
00:26:30,450 --> 00:26:37,289
60 mil jumper por 30 nos da 18 am pero

567
00:26:35,039 --> 00:26:40,139
en la práctica se puede trabajar sin

568
00:26:37,289 --> 00:26:42,049
problemas con el valor mínimo sugerido

569
00:26:40,140 --> 00:26:45,000
para la fuente ya que difícilmente

570
00:26:42,049 --> 00:26:48,240
tendremos todos los píxeles encendidos

571
00:26:45,000 --> 00:26:51,210
en color blanco a máximo brillo igual

572
00:26:48,240 --> 00:26:53,849
aunque esta situación suceda la fuente

573
00:26:51,210 --> 00:26:56,730
es capaz de absorber picos de consumo

574
00:26:53,849 --> 00:26:59,009
por breves períodos lo ideal para estar

575
00:26:56,730 --> 00:27:01,559
totalmente seguros que bajo cualquier

576
00:26:59,009 --> 00:27:05,009
circunstancia la fuente dará la

577
00:27:01,559 --> 00:27:06,759
corriente necesaria es utilizar una de

578
00:27:05,009 --> 00:27:08,858
18 amperios

579
00:27:06,759 --> 00:27:12,519
la elección se basa en el criterio de

580
00:27:08,858 --> 00:27:15,668
diseño una fuente de mayor amperaje será

581
00:27:12,519 --> 00:27:17,888
más voluminosa y también más costosa con

582
00:27:15,669 --> 00:27:20,159
lo cual muchas veces el proceso de

583
00:27:17,888 --> 00:27:22,958
elección se reduce a una relación

584
00:27:20,159 --> 00:27:25,149
prestación beneficio enviamos

585
00:27:22,959 --> 00:27:27,940
rápidamente los números si tuviésemos

586
00:27:25,148 --> 00:27:29,918
una tira de 60 píxeles como es de

587
00:27:27,940 --> 00:27:32,949
esperar los valores de corriente se

588
00:27:29,919 --> 00:27:36,820
duplican siendo de 1,2 samper como

589
00:27:32,949 --> 00:27:39,519
mínimo y un valor óptimo de 36 samper

590
00:27:36,819 --> 00:27:42,249
este cálculo de consumo de corriente

591
00:27:39,519 --> 00:27:44,499
deberás realizarlo para asegurarte de

592
00:27:42,249 --> 00:27:47,078
colocar una fuente adecuada para el

593
00:27:44,499 --> 00:27:49,209
proyecto finalmente te quiero mostrar

594
00:27:47,078 --> 00:27:51,908
una forma más en los que se pueden

595
00:27:49,209 --> 00:27:54,489
distribuir tiras de píxeles y es el

596
00:27:51,909 --> 00:27:57,809
formato de matriz es ideal para mostrar

597
00:27:54,489 --> 00:28:00,879
letras e imágenes como se puede observar

598
00:27:57,808 --> 00:28:04,449
simplemente es encadenar por ejemplo

599
00:28:00,878 --> 00:28:08,259
tiras de 8 píxeles en por ejemplo 8

600
00:28:04,449 --> 00:28:11,830
filas y así formar una matriz de 8 x 8

601
00:28:08,259 --> 00:28:14,048
con un total de 64 píxeles

602
00:28:11,829 --> 00:28:16,898
podrás ver desde el punto de vista de la

603
00:28:14,048 --> 00:28:19,509
conexión es lo mismo que encadenar ocho

604
00:28:16,898 --> 00:28:22,359
tiras la diferencia es la distribución

605
00:28:19,509 --> 00:28:24,640
física de cada tira para formar

606
00:28:22,359 --> 00:28:27,369
distintas filas en la tabla de la

607
00:28:24,640 --> 00:28:30,730
derecha vemos la posición que quedaría

608
00:28:27,369 --> 00:28:33,398
asignada a cada pixel esta es una forma

609
00:28:30,730 --> 00:28:35,380
de mapear la ubicación de cada pixel en

610
00:28:33,398 --> 00:28:38,158
la matriz de manera que si por ejemplo

611
00:28:35,380 --> 00:28:40,750
quisiéramos dibujar una carita sonriente

612
00:28:38,159 --> 00:28:44,049
solo sería cuestión de encender con la

613
00:28:40,750 --> 00:28:53,669
función set pixel color los píxeles en

614
00:28:44,048 --> 00:28:56,408
las posiciones 10 13 41 46 50 51 52 y 53

615
00:28:53,669 --> 00:28:58,538
existen placas de circuito impreso que

616
00:28:56,409 --> 00:29:01,179
ya tienen la distribución de los píxeles

617
00:28:58,538 --> 00:29:03,730
en formato de matriz si lo hacemos con

618
00:29:01,179 --> 00:29:06,009
tiras individuales además del trabajo de

619
00:29:03,730 --> 00:29:08,169
soldar muchos cables no nos quedará

620
00:29:06,009 --> 00:29:10,210
perfectamente cuadrado ya que la

621
00:29:08,169 --> 00:29:12,940
separación de píxeles en forma

622
00:29:10,210 --> 00:29:15,669
horizontal es muy junta pero de forma

623
00:29:12,940 --> 00:29:18,009
vertical queda mucho más espacio por el

624
00:29:15,669 --> 00:29:20,560
formato del circuito impreso

625
00:29:18,009 --> 00:29:23,680
orificios que tiene de fijación pero la

626
00:29:20,559 --> 00:29:26,470
idea es que veas como una tira se puede

627
00:29:23,680 --> 00:29:29,560
convertir en una matriz y cómo mapear la

628
00:29:26,470 --> 00:29:32,049
ubicación de cada uno de los píxeles eso

629
00:29:29,559 --> 00:29:34,210
es todo por este capítulo como siempre

630
00:29:32,049 --> 00:29:36,759
te pido te suscribas para recibir

631
00:29:34,210 --> 00:29:39,670
notificaciones y por cualquier duda o

632
00:29:36,759 --> 00:29:42,970
comentario lo podéis hacer debajo que

633
00:29:39,670 --> 00:29:45,210
con gusto te responderé chao y hasta la

634
00:29:42,970 --> 00:29:45,210
próxima

